// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.1
// source: push.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PushOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DryRun 只进行数据校验不实际推送，数据校验成功即为成功
	// @inject_tag: json:"dry_run"
	DryRun bool `protobuf:"varint,1,opt,name=DryRun,proto3" json:"dry_run"`
	// Development 测试模式推送
	// @inject_tag: json:"development"
	Development bool `protobuf:"varint,2,opt,name=Development,proto3" json:"development"`
	// Retry 重试次数
	// @inject_tag: json:"retry"
	Retry int32 `protobuf:"varint,3,opt,name=Retry,proto3" json:"retry"`
	// RetryInterval 重试间隔（以秒为单位）
	// @inject_tag: json:"retry_interval"
	RetryInterval int32 `protobuf:"varint,4,opt,name=RetryInterval,proto3" json:"retry_interval"`
}

func (x *PushOption) Reset() {
	*x = PushOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushOption) ProtoMessage() {}

func (x *PushOption) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushOption.ProtoReflect.Descriptor instead.
func (*PushOption) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{0}
}

func (x *PushOption) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *PushOption) GetDevelopment() bool {
	if x != nil {
		return x.Development
	}
	return false
}

func (x *PushOption) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *PushOption) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

type PushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AppID 应用程序标识
	// ios capacitor.config文件中的appId 例如com.hitosea.apptest
	// @inject_tag: json:"app_id"
	AppID string `protobuf:"bytes,1,opt,name=AppID,proto3" json:"app_id"`
	// AppName 应用名称
	// @inject_tag: json:"app_name"
	AppName string `protobuf:"bytes,2,opt,name=AppName,proto3" json:"app_name"`
	// Platform 推送平台 consts.Platform
	// @inject_tag: json:"platform" binding:"required"
	Platform string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"platform" binding:"required"`
	// Token 接收推送的设备标识
	// 例如ios为deviceToken
	// vivo、oppo为RegId
	// @inject_tag: json:"token" binding:"required"
	Token []string `protobuf:"bytes,4,rep,name=Token,proto3" json:"token" binding:"required"`
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,5,opt,name=Data,proto3" json:"data"`
	// PushOptions 推送选项
	// @inject_tag: json:"option"
	Option *PushOption `protobuf:"bytes,6,opt,name=Option,proto3" json:"option"`
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{1}
}

func (x *PushRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *PushRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *PushRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PushRequest) GetToken() []string {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PushRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PushRequest) GetOption() *PushOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type PushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=Code,proto3" json:"code"`
	// @inject_tag: json:"msg"
	Msg string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"msg"`
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,3,opt,name=Data,proto3" json:"data"` // bytes Data = 3[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{2}
}

func (x *PushResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PushResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PushResponse) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"app_id"
	AppID string `protobuf:"bytes,1,opt,name=AppID,proto3" json:"app_id"`
	// @inject_tag: json:"app_name"
	AppName string `protobuf:"bytes,2,opt,name=AppName,proto3" json:"app_name"`
	// @inject_tag: json:"token"
	Token []string `protobuf:"bytes,3,rep,name=Token,proto3" json:"token"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{3}
}

func (x *Meta) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Meta) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Meta) GetToken() []string {
	if x != nil {
		return x.Token
	}
	return nil
}

type APNsPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// Title Notification Title
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// Content Notification Content
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	// Topic The topic of the remote notification, which is typically the bundle ID
	// for your app. The certificate you create in the Apple Developer Member
	// Center must include the capability for this topic. If your certificate
	// includes multiple topics, you must specify a value for this header. If
	// you omit this header and your APNs certificate does not specify multiple
	// topics, the APNs server uses the certificate’s Subject as the default
	// topic.
	// @inject_tag: json:"topic"
	Topic string `protobuf:"bytes,4,opt,name=Topic,proto3" json:"topic"`
	// CollapseID A string which allows multiple notifications with the same collapse
	// identifier to be displayed to the user as a single notification. The
	// value should not exceed 64 bytes.
	// @inject_tag: json:"collapse_id"
	CollapseID string `protobuf:"bytes,5,opt,name=CollapseID,proto3" json:"collapse_id"`
	// ApnsID An optional canonical UUID that identifies the notification. The
	// canonical form is 32 lowercase hexadecimal digits, displayed in five
	// groups separated by hyphens in the form 8-4-4-4-12. An example UUID is as
	// follows:
	//
	//	123e4567-e89b-12d3-a456-42665544000
	//
	// If you don't set this, a new UUID is created by APNs and returned in the
	// response.
	// @inject_tag: json:"apns_id"
	ApnsID string `protobuf:"bytes,6,opt,name=ApnsID,proto3" json:"apns_id"`
	// Priority The priority of the notification
	// normal、high default normal
	// @inject_tag: json:"priority"
	Priority string `protobuf:"bytes,7,opt,name=Priority,proto3" json:"priority"`
	// PushType apns-push-type the value of the header
	// https://developer.apple.com/documentation/usernotifications/sending-notification-requests-to-apns#Know-when-to-use-push-types
	// @inject_tag: json:"push_type"
	PushType string `protobuf:"bytes,8,opt,name=PushType,proto3" json:"push_type"`
	// @inject_tag: json:"url_args"
	URLArgs []string `protobuf:"bytes,9,rep,name=URLArgs,proto3" json:"url_args"`
	// TTL represents the expiration date of the notification.
	// If the value is nonzero, it indicates that the notification is valid until the specified date.
	// The value is a UNIX epoch expressed in seconds (UTC).
	// If the value is nonzero, APNs stores the notification and attempts to deliver it at least once, repeating the attempt as needed until the specified date.
	// If the value is 0, APNs attempts to deliver the notification only once and does not store it.
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,10,opt,name=TTL,proto3" json:"ttl"`
	// Badge sets the aps badge on the payload.
	// This will display a numeric badge on the app icon.
	// @inject_tag: json:"badge"
	Badge       int32 `protobuf:"varint,11,opt,name=Badge,proto3" json:"badge"`
	Development bool  `protobuf:"varint,12,opt,name=Development,proto3" json:"Development,omitempty"`
	// MutableContent sets the aps mutable-content on the payload to 1.
	// This will indicate to the to the system to call your Notification Service
	// extension to mutate or replace the notification's content.
	// @inject_tag: json:"mutable_content"
	MutableContent bool `protobuf:"varint,13,opt,name=MutableContent,proto3" json:"mutable_content"`
	// ContentAvailable sets the aps content-available on the payload to 1.
	// This will indicate to the app that there is new content available to download
	// and launch the app in the background.
	// @inject_tag: json:"content_available"
	ContentAvailable bool `protobuf:"varint,14,opt,name=ContentAvailable,proto3" json:"content_available"`
	// @inject_tag: json:"category"
	Category    string       `protobuf:"bytes,15,opt,name=Category,proto3" json:"category"`
	ClickAction *ClickAction `protobuf:"bytes,16,opt,name=ClickAction,proto3" json:"ClickAction,omitempty"`
	// Sound sets the aps sound on the payload.
	// This will play a sound from the app bundle, or the default sound otherwise.
	// https://developer.apple.com/documentation/usernotifications/generating-a-remote-notification Table 3. Keys to include in the sound dictionary
	// @inject_tag: json:"sound"
	Sound *structpb.Struct `protobuf:"bytes,17,opt,name=Sound,proto3" json:"sound"` //  bytes Sound = 15[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型
	// Data sets a custom key and value on the payload.
	// This will add custom key/value data to the notification payload at root level.
	//
	//	map<string, google.protobuf.Any> data = 15;
	//
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,18,opt,name=Data,proto3" json:"data"` //  map<string, bytes> Data = 16[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型
}

func (x *APNsPushRequest) Reset() {
	*x = APNsPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNsPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNsPushRequest) ProtoMessage() {}

func (x *APNsPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNsPushRequest.ProtoReflect.Descriptor instead.
func (*APNsPushRequest) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{4}
}

func (x *APNsPushRequest) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *APNsPushRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *APNsPushRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *APNsPushRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *APNsPushRequest) GetCollapseID() string {
	if x != nil {
		return x.CollapseID
	}
	return ""
}

func (x *APNsPushRequest) GetApnsID() string {
	if x != nil {
		return x.ApnsID
	}
	return ""
}

func (x *APNsPushRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *APNsPushRequest) GetPushType() string {
	if x != nil {
		return x.PushType
	}
	return ""
}

func (x *APNsPushRequest) GetURLArgs() []string {
	if x != nil {
		return x.URLArgs
	}
	return nil
}

func (x *APNsPushRequest) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *APNsPushRequest) GetBadge() int32 {
	if x != nil {
		return x.Badge
	}
	return 0
}

func (x *APNsPushRequest) GetDevelopment() bool {
	if x != nil {
		return x.Development
	}
	return false
}

func (x *APNsPushRequest) GetMutableContent() bool {
	if x != nil {
		return x.MutableContent
	}
	return false
}

func (x *APNsPushRequest) GetContentAvailable() bool {
	if x != nil {
		return x.ContentAvailable
	}
	return false
}

func (x *APNsPushRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *APNsPushRequest) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *APNsPushRequest) GetSound() *structpb.Struct {
	if x != nil {
		return x.Sound
	}
	return nil
}

func (x *APNsPushRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type AndroidPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// Title Notification Title
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// Content Notification Content
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	// @inject_tag: json:"topic"
	Topic string `protobuf:"bytes,4,opt,name=Topic,proto3" json:"topic"`
	// TTL represents the duration for which the message is stored on the server if the user is offline.
	// The value should follow a specific format indicating the time duration, such as "86400s" for 1 day, "10m" for 10 minutes, or "1h" for 1 hour.
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,5,opt,name=TTL,proto3" json:"ttl"`
	// Priority The priority of the notification
	// normal、high default normal
	// @inject_tag: json:"priority"
	Priority string `protobuf:"bytes,6,opt,name=Priority,proto3" json:"priority"`
	// CollapseID represents the collapse identifier of the notification.
	// @inject_tag: json:"collapse_id"
	CollapseID string `protobuf:"bytes,7,opt,name=CollapseID,proto3" json:"collapse_id"`
	// Condition represents the condition for sending the notification to devices.
	// @inject_tag: json:"condition"
	Condition string `protobuf:"bytes,8,opt,name=Condition,proto3" json:"condition"`
	// Sound represents the custom sound for the push notification.
	// @inject_tag: json:"sound"
	Sound string `protobuf:"bytes,9,opt,name=Sound,proto3" json:"sound"`
	// Icon represents the icon associated with the push notification.
	// @inject_tag: json:"icon"
	Icon        string       `protobuf:"bytes,10,opt,name=Icon,proto3" json:"icon"`
	ClickAction *ClickAction `protobuf:"bytes,11,opt,name=ClickAction,proto3" json:"ClickAction,omitempty"`
	// Data Additional Custom Parameters
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,12,opt,name=Data,proto3" json:"data"`
}

func (x *AndroidPushRequestData) Reset() {
	*x = AndroidPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPushRequestData) ProtoMessage() {}

func (x *AndroidPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPushRequestData.ProtoReflect.Descriptor instead.
func (*AndroidPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{5}
}

func (x *AndroidPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AndroidPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AndroidPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AndroidPushRequestData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AndroidPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *AndroidPushRequestData) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *AndroidPushRequestData) GetCollapseID() string {
	if x != nil {
		return x.CollapseID
	}
	return ""
}

func (x *AndroidPushRequestData) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *AndroidPushRequestData) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *AndroidPushRequestData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AndroidPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *AndroidPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type HuaweiPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	// Category The category of the notification
	// https://developer.huawei.com/consumer/cn/doc/HMSCore-References/https-send-api-0000001050986197#:~:text=%E8%BF%9B%E8%A1%8C%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E3%80%82-,category,-%E5%90%A6
	// @inject_tag: json:"category"
	Category string `protobuf:"bytes,4,opt,name=Category,proto3" json:"category"`
	// Priority The priority of the notification
	// normal、high default normal
	// @inject_tag: json:"priority"
	Priority string `protobuf:"bytes,5,opt,name=Priority,proto3" json:"priority"`
	// Icon Small icon URL
	// @inject_tag: json:"icon"
	Icon string `protobuf:"bytes,6,opt,name=Icon,proto3" json:"icon"`
	// Sound represents the custom message notification ringtone.
	// It is effective when creating a new channel.
	// The ringtone file set here must be stored in the /res/raw path of the application.
	// For example, setting it to "/raw/shake" corresponds to the local "/res/raw/shake.xxx" file of the application.
	// Supported file formats include MP3, WAV, MPEG, etc.
	// If not set, the default system ringtone will be used.
	// @inject_tag: json:"sound"
	Sound string `protobuf:"bytes,7,opt,name=Sound,proto3" json:"sound"`
	// TTL represents the message cache time in seconds.
	// When the user device is offline, the message is cached on the Push server.
	// If the user device reconnects to the network within the message cache time, the message will be delivered.
	// After the cache time expires, the message will be discarded.
	// The default value is "86400s" (1 day), and the maximum value is "1296000s" (15 days).
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,8,opt,name=TTL,proto3" json:"ttl"`
	// Foreground When the application is in the foreground, whether the notification bar message shows the switch
	// @inject_tag: json:"foreground"
	Foreground  bool         `protobuf:"varint,9,opt,name=Foreground,proto3" json:"foreground"`
	ClickAction *ClickAction `protobuf:"bytes,10,opt,name=ClickAction,proto3" json:"ClickAction,omitempty"`
	// @inject_tag: json:"badge"
	Badge *BadgeNotification `protobuf:"bytes,11,opt,name=Badge,proto3" json:"badge"`
	// Data Additional Custom Parameters
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,12,opt,name=Data,proto3" json:"data"`
}

func (x *HuaweiPushRequestData) Reset() {
	*x = HuaweiPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiPushRequestData) ProtoMessage() {}

func (x *HuaweiPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiPushRequestData.ProtoReflect.Descriptor instead.
func (*HuaweiPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{6}
}

func (x *HuaweiPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *HuaweiPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HuaweiPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HuaweiPushRequestData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *HuaweiPushRequestData) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *HuaweiPushRequestData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *HuaweiPushRequestData) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *HuaweiPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *HuaweiPushRequestData) GetForeground() bool {
	if x != nil {
		return x.Foreground
	}
	return false
}

func (x *HuaweiPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *HuaweiPushRequestData) GetBadge() *BadgeNotification {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *HuaweiPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// XiaomiPushRequestData
// https://dev.mi.com/console/doc/detail?pId=2776#_0
type XiaomiPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// @inject_tag: json:"subtitle"
	Subtitle string `protobuf:"bytes,3,opt,name=Subtitle,proto3" json:"subtitle"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,4,opt,name=Content,proto3" json:"content"`
	// Foreground When the application is in the foreground, whether the notification bar message shows the switch
	// @inject_tag: json:"foreground"
	Foreground bool `protobuf:"varint,5,opt,name=Foreground,proto3" json:"foreground"`
	// Icon 消息图标，用于在通知栏上显示的图标
	// @inject_tag: json:"icon"
	Icon string `protobuf:"bytes,6,opt,name=Icon,proto3" json:"icon"`
	// TTL 如果用户离线，设置消息在服务器保存的时间，单位：s，服务器默认最长保留两周。
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,7,opt,name=TTL,proto3" json:"ttl"`
	// NotifyType represents the type of notification, and its value can be DEFAULT_ALL or a combination of the following:
	// DEFAULT_ALL = -1; DEFAULT_SOUND = 1;
	// Use the default sound for notification; DEFAULT_VIBRATE = 2;
	// Use default vibration for notification; DEFAULT_LIGHTS = 4;
	// Use default lights for notification.
	// @inject_tag: json:"notify_type"
	NotifyType int32 `protobuf:"varint,8,opt,name=NotifyType,proto3" json:"notify_type"`
	// ClickAction Click behavior for predefined notification bar messages
	// "1": Open the Launcher Activity of the app after clicking on the notification in the notification bar.
	// "2": Open any Activity of the app after clicking on the notification in the notification bar (the developer also needs to pass url).
	// "3": Open a webpage after clicking on the notification in the notification bar.
	// @inject_tag: json:"click_action"
	ClickAction *ClickAction `protobuf:"bytes,9,opt,name=ClickAction,proto3" json:"click_action"`
	// Data Additional Custom Parameters
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,10,opt,name=Data,proto3" json:"data"`
}

func (x *XiaomiPushRequestData) Reset() {
	*x = XiaomiPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XiaomiPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XiaomiPushRequestData) ProtoMessage() {}

func (x *XiaomiPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XiaomiPushRequestData.ProtoReflect.Descriptor instead.
func (*XiaomiPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{7}
}

func (x *XiaomiPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *XiaomiPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *XiaomiPushRequestData) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *XiaomiPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *XiaomiPushRequestData) GetForeground() bool {
	if x != nil {
		return x.Foreground
	}
	return false
}

func (x *XiaomiPushRequestData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *XiaomiPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *XiaomiPushRequestData) GetNotifyType() int32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *XiaomiPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *XiaomiPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type OppoPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// Foreground When the application is in the foreground, whether the notification bar message shows the switch
	// @inject_tag: json:"foreground"
	Foreground bool `protobuf:"varint,2,opt,name=Foreground,proto3" json:"foreground"`
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"title"`
	// @inject_tag: json:"subtitle"
	Subtitle string `protobuf:"bytes,4,opt,name=Subtitle,proto3" json:"subtitle"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,5,opt,name=Content,proto3" json:"content"`
	// TTL 消息有效时长，即推送服务缓存消息的时长，从消息创建是开始计算，最短为1小时，最长10天 单位：s
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,6,opt,name=TTL,proto3" json:"ttl"`
	// 通知类型 1:无，2:响铃，3:振动，4:响铃和振动
	// @inject_tag: json:"notify_type"
	NotifyType int32 `protobuf:"varint,7,opt,name=NotifyType,proto3" json:"notify_type"`
	// Icon 消息图标，用于在通知栏上显示的图标
	// @inject_tag: json:"icon"
	Icon string `protobuf:"bytes,8,opt,name=Icon,proto3" json:"icon"`
	// ClickAction 点击动作
	// Action 点击跳转类型 1：打开APP首页 2：打开链接 3：自定义 4:打开app内指定页面 5:跳转Intentscheme URL   默认值为 0
	// 0 启动应用
	// 1 打开应用内页（activity的action标签名）
	// 2 打开网页
	// 4 打开应用内页（activity 全路径类名）
	// 5 Intentscheme URL
	// @inject_tag: json:"click_action"
	ClickAction *ClickAction `protobuf:"bytes,9,opt,name=ClickAction,proto3" json:"click_action"`
	// Data Additional Custom Parameters
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,10,opt,name=Data,proto3" json:"data"`
}

func (x *OppoPushRequestData) Reset() {
	*x = OppoPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OppoPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OppoPushRequestData) ProtoMessage() {}

func (x *OppoPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OppoPushRequestData.ProtoReflect.Descriptor instead.
func (*OppoPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{8}
}

func (x *OppoPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *OppoPushRequestData) GetForeground() bool {
	if x != nil {
		return x.Foreground
	}
	return false
}

func (x *OppoPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OppoPushRequestData) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *OppoPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OppoPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *OppoPushRequestData) GetNotifyType() int32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *OppoPushRequestData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *OppoPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *OppoPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// VivoPushNotification
// https://dev.vivo.com.cn/documentCenter/doc/362#:~:text=%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89-,%E8%BE%93%E5%85%A5%E5%8F%82%E6%95%B0%EF%BC%9A,-intent%20uri
type VivoPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// Foreground Whether to display notification bar messages when the app is in the foreground
	// @inject_tag: json:"foreground"
	Foreground bool `protobuf:"varint,2,opt,name=Foreground,proto3" json:"foreground"`
	// TTL The valid duration of the message, in seconds, and the duration of the push service cache message.
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,4,opt,name=TTL,proto3" json:"ttl"`
	// NotifyType Notification Type, 1: None, 2: Bell, 3: Vibration, 4: Bell and Vibration
	// @inject_tag: json:"notify_type"
	NotifyType int32 `protobuf:"varint,5,opt,name=NotifyType,proto3" json:"notify_type"`
	// @inject_tag: json:"notify_id"
	NotifyID int32 `protobuf:"varint,6,opt,name=NotifyID,proto3" json:"notify_id"`
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,7,opt,name=Title,proto3" json:"title"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,8,opt,name=Content,proto3" json:"content"`
	// @inject_tag: json:"category"
	Category string `protobuf:"bytes,9,opt,name=Category,proto3" json:"category"`
	// @inject_tag: json:"task_id"
	TaskId string `protobuf:"bytes,10,opt,name=TaskId,proto3" json:"task_id"`
	// @inject_tag: json:"click_action"
	ClickAction *ClickAction `protobuf:"bytes,11,opt,name=ClickAction,proto3" json:"click_action"`
	// Data Additional Custom Parameters
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,12,opt,name=Data,proto3" json:"data"`
}

func (x *VivoPushRequestData) Reset() {
	*x = VivoPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VivoPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VivoPushRequestData) ProtoMessage() {}

func (x *VivoPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VivoPushRequestData.ProtoReflect.Descriptor instead.
func (*VivoPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{9}
}

func (x *VivoPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *VivoPushRequestData) GetForeground() bool {
	if x != nil {
		return x.Foreground
	}
	return false
}

func (x *VivoPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *VivoPushRequestData) GetNotifyType() int32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *VivoPushRequestData) GetNotifyID() int32 {
	if x != nil {
		return x.NotifyID
	}
	return 0
}

func (x *VivoPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VivoPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *VivoPushRequestData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *VivoPushRequestData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VivoPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *VivoPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClickAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action represents the click action.
	// Different manufacturers have different definitions.
	// @inject_tag: json:"action"
	Action int32 `protobuf:"varint,1,opt,name=Action,proto3" json:"action"`
	// Activity opens an in-app page (activity's intent action).
	// @inject_tag: json:"activity"
	Activity string `protobuf:"bytes,2,opt,name=Activity,proto3" json:"activity"`
	// Url opens the URL of a webpage.
	// @inject_tag: json:"url"
	Url string `protobuf:"bytes,3,opt,name=Url,proto3" json:"url"`
	// Parameters represent the parameters appended to the URL after the URL redirection.
	// @inject_tag: json:"parameters"
	Parameters *structpb.Struct `protobuf:"bytes,4,opt,name=Parameters,proto3" json:"parameters"`
}

func (x *ClickAction) Reset() {
	*x = ClickAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickAction) ProtoMessage() {}

func (x *ClickAction) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickAction.ProtoReflect.Descriptor instead.
func (*ClickAction) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{10}
}

func (x *ClickAction) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *ClickAction) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

func (x *ClickAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ClickAction) GetParameters() *structpb.Struct {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// MeizuPushNotification
// https://github.com/MEIZUPUSH/PushAPI/blob/master/README.md
type MeizuPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	// TTL The valid duration of the message, in seconds, and the duration of the push service cache message.
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,4,opt,name=TTL,proto3" json:"ttl"`
	// NotifyType
	// DEFAULT_ALL = -1;
	// DEFAULT_SOUND = 0; 使用默认提示音提示
	// DEFAULT_VIBRATE = 1; 使用默认振动提示
	// DEFAULT_LIGHTS = 2; 使用默认呼吸灯提示。
	// @inject_tag: json:"notify_type"
	NotifyType int32 `protobuf:"varint,5,opt,name=NotifyType,proto3" json:"notify_type"`
	// Foreground Whether to display notification bar messages when the app is in the foreground
	// @inject_tag: json:"foreground"
	Foreground bool `protobuf:"varint,6,opt,name=Foreground,proto3" json:"foreground"`
	// ClickAction 点击跳转类型
	// 0 打开应用
	// 1 打开应用内页（activity的action标签名）
	// 2 打开H5地址（应用本地的URI）
	// Activity 打开应用内页（activity 的 intent action）
	// @inject_tag: json:"click_action"
	ClickAction *ClickAction `protobuf:"bytes,10,opt,name=ClickAction,proto3" json:"click_action"`
	// Data Additional Custom Parameters
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,11,opt,name=Data,proto3" json:"data"`
}

func (x *MeizuPushRequestData) Reset() {
	*x = MeizuPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeizuPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeizuPushRequestData) ProtoMessage() {}

func (x *MeizuPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeizuPushRequestData.ProtoReflect.Descriptor instead.
func (*MeizuPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{11}
}

func (x *MeizuPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MeizuPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MeizuPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MeizuPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *MeizuPushRequestData) GetNotifyType() int32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *MeizuPushRequestData) GetForeground() bool {
	if x != nil {
		return x.Foreground
	}
	return false
}

func (x *MeizuPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *MeizuPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type HonorPushRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=Meta,proto3" json:"meta"`
	// @inject_tag: json:"title"
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	// Icon Message icon, the icon to display on the notification bar
	// @inject_tag: json:"icon"
	Icon string `protobuf:"bytes,4,opt,name=Icon,proto3" json:"icon"`
	// Tag Message identifier, used for message deduplication and overwriting.
	// @inject_tag: json:"tag"
	Tag string `protobuf:"bytes,5,opt,name=Tag,proto3" json:"tag"`
	// Group 消息分组，例 如发送10条带有同样group字段的消息，手机上只会展示该组消息中最新的一条和当前该组接收到的消息总数目，不会展示10条消息。
	// @inject_tag: json:"group"
	Group string `protobuf:"bytes,6,opt,name=Group,proto3" json:"group"`
	// NotifyId 消息通知ID，用于消息覆盖
	// @inject_tag: json:"notify_id"
	NotifyId int32 `protobuf:"varint,7,opt,name=NotifyId,proto3" json:"notify_id"`
	// TTL The valid duration of the message, in seconds, and the duration of the push service cache message.
	// @inject_tag: json:"ttl"
	TTL int64 `protobuf:"varint,8,opt,name=TTL,proto3" json:"ttl"`
	// 测试模式推送消息
	// @inject_tag: json:"development"
	Development bool `protobuf:"varint,9,opt,name=Development,proto3" json:"development"`
	// Action 点击跳转类型
	// 1 打开应用内页（activity的action标签名）
	// 2 打开特定url
	// 3 打开应用
	// @inject_tag: json:"click_action"
	ClickAction *ClickAction `protobuf:"bytes,10,opt,name=ClickAction,proto3" json:"click_action"`
	// 消息角标
	// @inject_tag: json:"badge"
	Badge *BadgeNotification `protobuf:"bytes,11,opt,name=Badge,proto3" json:"badge"`
	// 附加的自定义参数
	// @inject_tag: json:"data"
	Data *structpb.Struct `protobuf:"bytes,12,opt,name=Data,proto3" json:"data"`
}

func (x *HonorPushRequestData) Reset() {
	*x = HonorPushRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HonorPushRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HonorPushRequestData) ProtoMessage() {}

func (x *HonorPushRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HonorPushRequestData.ProtoReflect.Descriptor instead.
func (*HonorPushRequestData) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{12}
}

func (x *HonorPushRequestData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *HonorPushRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HonorPushRequestData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HonorPushRequestData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *HonorPushRequestData) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *HonorPushRequestData) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *HonorPushRequestData) GetNotifyId() int32 {
	if x != nil {
		return x.NotifyId
	}
	return 0
}

func (x *HonorPushRequestData) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *HonorPushRequestData) GetDevelopment() bool {
	if x != nil {
		return x.Development
	}
	return false
}

func (x *HonorPushRequestData) GetClickAction() *ClickAction {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

func (x *HonorPushRequestData) GetBadge() *BadgeNotification {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *HonorPushRequestData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type BadgeNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"add_num"
	AddNum int32 `protobuf:"varint,1,opt,name=AddNum,proto3" json:"add_num"`
	// @inject_tag: json:"set_num"
	SetNum int32 `protobuf:"varint,2,opt,name=SetNum,proto3" json:"set_num"`
	// @inject_tag: json:"class"
	Class string `protobuf:"bytes,3,opt,name=Class,proto3" json:"class"`
}

func (x *BadgeNotification) Reset() {
	*x = BadgeNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_push_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeNotification) ProtoMessage() {}

func (x *BadgeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_push_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeNotification.ProtoReflect.Descriptor instead.
func (*BadgeNotification) Descriptor() ([]byte, []int) {
	return file_push_proto_rawDescGZIP(), []int{13}
}

func (x *BadgeNotification) GetAddNum() int32 {
	if x != nil {
		return x.AddNum
	}
	return 0
}

func (x *BadgeNotification) GetSetNum() int32 {
	if x != nil {
		return x.SetNum
	}
	return 0
}

func (x *BadgeNotification) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

var File_push_proto protoreflect.FileDescriptor

var file_push_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x82, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0c,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc8, 0x04,
	0x0a, 0x0f, 0x41, 0x50, 0x4e, 0x73, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x6e, 0x73, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x6e, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x52, 0x4c, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x52, 0x4c, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54,
	0x4c, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x02, 0x0a, 0x16, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86, 0x03,
	0x0a, 0x15, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46,
	0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x02, 0x0a, 0x15, 0x58, 0x69, 0x61, 0x6f, 0x6d,
	0x69, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f,
	0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c,
	0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xc5, 0x02, 0x0a, 0x13, 0x4f, 0x70, 0x70, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x6f, 0x72, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x76,
	0x6f, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c,
	0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x96, 0x02, 0x0a, 0x14, 0x4d, 0x65, 0x69, 0x7a, 0x75, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x6f,
	0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x02, 0x0a, 0x14, 0x48, 0x6f, 0x6e,
	0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x11, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41,
	0x64, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x32, 0x3a, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_push_proto_rawDescOnce sync.Once
	file_push_proto_rawDescData = file_push_proto_rawDesc
)

func file_push_proto_rawDescGZIP() []byte {
	file_push_proto_rawDescOnce.Do(func() {
		file_push_proto_rawDescData = protoimpl.X.CompressGZIP(file_push_proto_rawDescData)
	})
	return file_push_proto_rawDescData
}

var file_push_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_push_proto_goTypes = []interface{}{
	(*PushOption)(nil),             // 0: v1.PushOption
	(*PushRequest)(nil),            // 1: v1.PushRequest
	(*PushResponse)(nil),           // 2: v1.PushResponse
	(*Meta)(nil),                   // 3: v1.Meta
	(*APNsPushRequest)(nil),        // 4: v1.APNsPushRequest
	(*AndroidPushRequestData)(nil), // 5: v1.AndroidPushRequestData
	(*HuaweiPushRequestData)(nil),  // 6: v1.HuaweiPushRequestData
	(*XiaomiPushRequestData)(nil),  // 7: v1.XiaomiPushRequestData
	(*OppoPushRequestData)(nil),    // 8: v1.OppoPushRequestData
	(*VivoPushRequestData)(nil),    // 9: v1.VivoPushRequestData
	(*ClickAction)(nil),            // 10: v1.ClickAction
	(*MeizuPushRequestData)(nil),   // 11: v1.MeizuPushRequestData
	(*HonorPushRequestData)(nil),   // 12: v1.HonorPushRequestData
	(*BadgeNotification)(nil),      // 13: v1.BadgeNotification
	(*structpb.Struct)(nil),        // 14: google.protobuf.Struct
}
var file_push_proto_depIdxs = []int32{
	14, // 0: v1.PushRequest.Data:type_name -> google.protobuf.Struct
	0,  // 1: v1.PushRequest.Option:type_name -> v1.PushOption
	14, // 2: v1.PushResponse.Data:type_name -> google.protobuf.Struct
	3,  // 3: v1.APNsPushRequest.meta:type_name -> v1.Meta
	10, // 4: v1.APNsPushRequest.ClickAction:type_name -> v1.ClickAction
	14, // 5: v1.APNsPushRequest.Sound:type_name -> google.protobuf.Struct
	14, // 6: v1.APNsPushRequest.Data:type_name -> google.protobuf.Struct
	3,  // 7: v1.AndroidPushRequestData.Meta:type_name -> v1.Meta
	10, // 8: v1.AndroidPushRequestData.ClickAction:type_name -> v1.ClickAction
	14, // 9: v1.AndroidPushRequestData.Data:type_name -> google.protobuf.Struct
	3,  // 10: v1.HuaweiPushRequestData.Meta:type_name -> v1.Meta
	10, // 11: v1.HuaweiPushRequestData.ClickAction:type_name -> v1.ClickAction
	13, // 12: v1.HuaweiPushRequestData.Badge:type_name -> v1.BadgeNotification
	14, // 13: v1.HuaweiPushRequestData.Data:type_name -> google.protobuf.Struct
	3,  // 14: v1.XiaomiPushRequestData.Meta:type_name -> v1.Meta
	10, // 15: v1.XiaomiPushRequestData.ClickAction:type_name -> v1.ClickAction
	14, // 16: v1.XiaomiPushRequestData.Data:type_name -> google.protobuf.Struct
	3,  // 17: v1.OppoPushRequestData.Meta:type_name -> v1.Meta
	10, // 18: v1.OppoPushRequestData.ClickAction:type_name -> v1.ClickAction
	14, // 19: v1.OppoPushRequestData.Data:type_name -> google.protobuf.Struct
	3,  // 20: v1.VivoPushRequestData.Meta:type_name -> v1.Meta
	10, // 21: v1.VivoPushRequestData.ClickAction:type_name -> v1.ClickAction
	14, // 22: v1.VivoPushRequestData.Data:type_name -> google.protobuf.Struct
	14, // 23: v1.ClickAction.Parameters:type_name -> google.protobuf.Struct
	3,  // 24: v1.MeizuPushRequestData.Meta:type_name -> v1.Meta
	10, // 25: v1.MeizuPushRequestData.ClickAction:type_name -> v1.ClickAction
	14, // 26: v1.MeizuPushRequestData.Data:type_name -> google.protobuf.Struct
	3,  // 27: v1.HonorPushRequestData.Meta:type_name -> v1.Meta
	10, // 28: v1.HonorPushRequestData.ClickAction:type_name -> v1.ClickAction
	13, // 29: v1.HonorPushRequestData.Badge:type_name -> v1.BadgeNotification
	14, // 30: v1.HonorPushRequestData.Data:type_name -> google.protobuf.Struct
	1,  // 31: v1.PushService.Push:input_type -> v1.PushRequest
	2,  // 32: v1.PushService.Push:output_type -> v1.PushResponse
	32, // [32:33] is the sub-list for method output_type
	31, // [31:32] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_push_proto_init() }
func file_push_proto_init() {
	if File_push_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_push_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNsPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XiaomiPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OppoPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VivoPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeizuPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HonorPushRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_push_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_push_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_push_proto_goTypes,
		DependencyIndexes: file_push_proto_depIdxs,
		MessageInfos:      file_push_proto_msgTypes,
	}.Build()
	File_push_proto = out.File
	file_push_proto_rawDesc = nil
	file_push_proto_goTypes = nil
	file_push_proto_depIdxs = nil
}

syntax = "proto3";

//import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
//import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/struct.proto";

package v1;
//option go_package = "github.com/cossim/hipush/api/grpc/v1";
option go_package = "./;v1";

message PushOption {
  // DryRun 只进行数据校验不实际推送，数据校验成功即为成功
  // @inject_tag: json:"dry_run"
  bool DryRun = 1;

  // Development 测试模式推送
  // @inject_tag: json:"development"
   bool Development =2;

  // Retry 重试次数
  // @inject_tag: json:"retry"
  int32 Retry = 3;

  // RetryInterval 重试间隔（以秒为单位）
  // @inject_tag: json:"retry_interval"
  int32 RetryInterval = 4;
}

message PushRequest {
  // AppID 应用程序标识
  // ios capacitor.config文件中的appId 例如com.hitosea.apptest
  // @inject_tag: json:"app_id"
  string AppID = 1;

  // AppName 应用名称
  // @inject_tag: json:"app_name"
  string AppName = 2;

  // Platform 推送平台 consts.Platform
  // @inject_tag: json:"platform" binding:"required"
  string Platform = 3;

  // Token 接收推送的设备标识
  // 例如ios为deviceToken
  // vivo、oppo为RegId
  // @inject_tag: json:"token" binding:"required"
  repeated string Token = 4;

  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 5;
  //  bytes Data = 5[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型
//  bytes Data = 5; // InterfaceType为自定义类型

  // PushOptions 推送选项
  // @inject_tag: json:"option"
  PushOption Option = 6;
}

message PushResponse {
  // @inject_tag: json:"code"
  int32 Code = 1;

  // @inject_tag: json:"msg"
  string Msg = 2;

  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 3;
  // bytes Data = 3[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型
}

message Meta {
  // @inject_tag: json:"app_id"
  string AppID = 1;
  // @inject_tag: json:"app_name"
  string AppName = 2;
  // @inject_tag: json:"token"
  repeated string Token = 3;
}

message APNsPushRequest {
  // @inject_tag: json:"meta"
  Meta meta = 1;

  // Title Notification Title
  // @inject_tag: json:"title"
  string Title = 2;

  // Content Notification Content
  // @inject_tag: json:"content"
  string Content = 3;

  // Topic The topic of the remote notification, which is typically the bundle ID
  // for your app. The certificate you create in the Apple Developer Member
  // Center must include the capability for this topic. If your certificate
  // includes multiple topics, you must specify a value for this header. If
  // you omit this header and your APNs certificate does not specify multiple
  // topics, the APNs server uses the certificate’s Subject as the default
  // topic.
  // @inject_tag: json:"topic"
  string Topic = 4;

  // CollapseID A string which allows multiple notifications with the same collapse
  // identifier to be displayed to the user as a single notification. The
  // value should not exceed 64 bytes.
  // @inject_tag: json:"collapse_id"
  string CollapseID = 5;

  // ApnsID An optional canonical UUID that identifies the notification. The
  // canonical form is 32 lowercase hexadecimal digits, displayed in five
  // groups separated by hyphens in the form 8-4-4-4-12. An example UUID is as
  // follows:
  //
  //  123e4567-e89b-12d3-a456-42665544000
  //
  // If you don't set this, a new UUID is created by APNs and returned in the
  // response.
  // @inject_tag: json:"apns_id"
  string ApnsID = 6;

  // Priority The priority of the notification
  // normal、high default normal
  // @inject_tag: json:"priority"
  string Priority = 7;

  // PushType apns-push-type the value of the header
  // https://developer.apple.com/documentation/usernotifications/sending-notification-requests-to-apns#Know-when-to-use-push-types
  // @inject_tag: json:"push_type"
  string PushType = 8;

  // @inject_tag: json:"url_args"
  repeated string URLArgs = 9;

  // TTL represents the expiration date of the notification.
  // If the value is nonzero, it indicates that the notification is valid until the specified date.
  // The value is a UNIX epoch expressed in seconds (UTC).
  // If the value is nonzero, APNs stores the notification and attempts to deliver it at least once, repeating the attempt as needed until the specified date.
  // If the value is 0, APNs attempts to deliver the notification only once and does not store it.
  // @inject_tag: json:"ttl"
  int64 TTL = 10;

  // Badge sets the aps badge on the payload.
  // This will display a numeric badge on the app icon.
  // @inject_tag: json:"badge"
  int32 Badge = 11;
  bool Development = 12;

  // MutableContent sets the aps mutable-content on the payload to 1.
  // This will indicate to the to the system to call your Notification Service
  // extension to mutate or replace the notification's content.
  // @inject_tag: json:"mutable_content"
  bool MutableContent = 13;

  // ContentAvailable sets the aps content-available on the payload to 1.
  // This will indicate to the app that there is new content available to download
  // and launch the app in the background.
  // @inject_tag: json:"content_available"
  bool ContentAvailable = 14;

  // @inject_tag: json:"category"
  string Category = 15;

  ClickAction ClickAction = 16;

  // Sound sets the aps sound on the payload.
  // This will play a sound from the app bundle, or the default sound otherwise.
  // https://developer.apple.com/documentation/usernotifications/generating-a-remote-notification Table 3. Keys to include in the sound dictionary
  // @inject_tag: json:"sound"
  google.protobuf.Struct Sound = 17;
  //  bytes Sound = 15[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型

  // Data sets a custom key and value on the payload.
  // This will add custom key/value data to the notification payload at root level.
//  map<string, google.protobuf.Any> data = 15;
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 18;
//  map<string, bytes> Data = 16[(gogoproto.customtype) = "InterfaceType", (gogoproto.nullable) = false]; // InterfaceType为自定义类型

}


message AndroidPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;

  // Title Notification Title
  // @inject_tag: json:"title"
  string Title = 2;

  // Content Notification Content
  // @inject_tag: json:"content"
  string Content = 3;

  // @inject_tag: json:"topic"
  string Topic = 4;

  // TTL represents the duration for which the message is stored on the server if the user is offline.
  // The value should follow a specific format indicating the time duration, such as "86400s" for 1 day, "10m" for 10 minutes, or "1h" for 1 hour.
  // @inject_tag: json:"ttl"
  int64 TTL = 5;

  // Priority The priority of the notification
  // normal、high default normal
  // @inject_tag: json:"priority"
  string Priority = 6;

  // CollapseID represents the collapse identifier of the notification.
  // @inject_tag: json:"collapse_id"
  string CollapseID = 7;

  // Condition represents the condition for sending the notification to devices.
  // @inject_tag: json:"condition"
  string Condition = 8;

  // Sound represents the custom sound for the push notification.
  // @inject_tag: json:"sound"
  string Sound = 9;

  // Icon represents the icon associated with the push notification.
  // @inject_tag: json:"icon"
  string Icon = 10;

  ClickAction ClickAction = 11;

  // Data Additional Custom Parameters
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 12;
}

message HuaweiPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;
  // @inject_tag: json:"title"
  string Title = 2;
  // @inject_tag: json:"content"
  string Content = 3;

  // Category The category of the notification
  // https://developer.huawei.com/consumer/cn/doc/HMSCore-References/https-send-api-0000001050986197#:~:text=%E8%BF%9B%E8%A1%8C%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E3%80%82-,category,-%E5%90%A6
  // @inject_tag: json:"category"
  string Category = 4;

  // Priority The priority of the notification
  // normal、high default normal
  // @inject_tag: json:"priority"
  string Priority = 5;

  // Icon Small icon URL
  // @inject_tag: json:"icon"
  string Icon = 6;

  // Sound represents the custom message notification ringtone.
  // It is effective when creating a new channel.
  // The ringtone file set here must be stored in the /res/raw path of the application.
  // For example, setting it to "/raw/shake" corresponds to the local "/res/raw/shake.xxx" file of the application.
  // Supported file formats include MP3, WAV, MPEG, etc.
  // If not set, the default system ringtone will be used.
  // @inject_tag: json:"sound"
  string Sound = 7;
  // TTL represents the message cache time in seconds.
  // When the user device is offline, the message is cached on the Push server.
  // If the user device reconnects to the network within the message cache time, the message will be delivered.
  // After the cache time expires, the message will be discarded.
  // The default value is "86400s" (1 day), and the maximum value is "1296000s" (15 days).
  // @inject_tag: json:"ttl"
  int64 TTL = 8;

  // Foreground When the application is in the foreground, whether the notification bar message shows the switch
  // @inject_tag: json:"foreground"
  bool Foreground = 9;

  ClickAction ClickAction = 10;

  // @inject_tag: json:"badge"
  BadgeNotification Badge = 11;

  // Data Additional Custom Parameters
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 12;
}

// XiaomiPushRequestData
// https://dev.mi.com/console/doc/detail?pId=2776#_0
message XiaomiPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;

  // @inject_tag: json:"title"
  string Title = 2;

  // @inject_tag: json:"subtitle"
  string Subtitle = 3;

  // @inject_tag: json:"content"
  string Content = 4;

  // Foreground When the application is in the foreground, whether the notification bar message shows the switch
  // @inject_tag: json:"foreground"
  bool Foreground = 5;

  // Icon 消息图标，用于在通知栏上显示的图标
  // @inject_tag: json:"icon"
  string Icon = 6;

  // TTL 如果用户离线，设置消息在服务器保存的时间，单位：s，服务器默认最长保留两周。
  // @inject_tag: json:"ttl"
  int64 TTL = 7;

  // IsScheduled false为立即推送 true为定时推送
  // 消息会在ScheduledStart-ScheduledEnd的时间段内随机展示
//   bool IsScheduled
  // ScheduledTime 定时推送的开始时间，指定消息推送的开始时间
  // 用自1970年1月1日以来00:00:00.0 UTC时间表示（以毫秒为单位的时间），仅支持七天内的定时消息。
//  int64 ScheduledTime

  // NotifyType represents the type of notification, and its value can be DEFAULT_ALL or a combination of the following:
  // DEFAULT_ALL = -1; DEFAULT_SOUND = 1;
  // Use the default sound for notification; DEFAULT_VIBRATE = 2;
  //Use default vibration for notification; DEFAULT_LIGHTS = 4;
  //Use default lights for notification.
  // @inject_tag: json:"notify_type"
  int32 NotifyType = 8;

  // ClickAction Click behavior for predefined notification bar messages
  // "1": Open the Launcher Activity of the app after clicking on the notification in the notification bar.
  // "2": Open any Activity of the app after clicking on the notification in the notification bar (the developer also needs to pass url).
  // "3": Open a webpage after clicking on the notification in the notification bar.
  // @inject_tag: json:"click_action"
  ClickAction ClickAction = 9;

  // Data Additional Custom Parameters
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 10;
}

message OppoPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;
  // Foreground When the application is in the foreground, whether the notification bar message shows the switch
  // @inject_tag: json:"foreground"
  bool Foreground  = 2;

  // @inject_tag: json:"title"
  string Title = 3;

  // @inject_tag: json:"subtitle"
  string  Subtitle = 4;

  // @inject_tag: json:"content"
  string Content = 5;

  // TTL 消息有效时长，即推送服务缓存消息的时长，从消息创建是开始计算，最短为1小时，最长10天 单位：s
  // @inject_tag: json:"ttl"
  int64 TTL = 6;

  // 通知类型 1:无，2:响铃，3:振动，4:响铃和振动
  // @inject_tag: json:"notify_type"
  int32 NotifyType = 7;

  // Icon 消息图标，用于在通知栏上显示的图标
  // @inject_tag: json:"icon"
  string Icon = 8;

  // ClickAction 点击动作
  // Action 点击跳转类型 1：打开APP首页 2：打开链接 3：自定义 4:打开app内指定页面 5:跳转Intentscheme URL   默认值为 0
  // 0 启动应用
  // 1 打开应用内页（activity的action标签名）
  // 2 打开网页
  // 4 打开应用内页（activity 全路径类名）
  // 5 Intentscheme URL
  // @inject_tag: json:"click_action"
  ClickAction ClickAction = 9;

  // Data Additional Custom Parameters
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 10;
}

// VivoPushNotification
// https://dev.vivo.com.cn/documentCenter/doc/362#:~:text=%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89-,%E8%BE%93%E5%85%A5%E5%8F%82%E6%95%B0%EF%BC%9A,-intent%20uri
message VivoPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;
  // Foreground Whether to display notification bar messages when the app is in the foreground
  // @inject_tag: json:"foreground"
  bool Foreground = 2;

  // TTL The valid duration of the message, in seconds, and the duration of the push service cache message.
  // @inject_tag: json:"ttl"
  int64 TTL = 4;

  // NotifyType Notification Type, 1: None, 2: Bell, 3: Vibration, 4: Bell and Vibration
  // @inject_tag: json:"notify_type"
  int32 NotifyType = 5;

  // @inject_tag: json:"notify_id"
  int32 NotifyID = 6;

  // @inject_tag: json:"title"
  string Title = 7;

  // @inject_tag: json:"content"
  string Content = 8;

  // @inject_tag: json:"category"
  string Category = 9;

  // @inject_tag: json:"task_id"
  string TaskId = 10;

  // @inject_tag: json:"click_action"
  ClickAction ClickAction = 11;

  // Data Additional Custom Parameters
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 12;
}

message ClickAction {
  // Action represents the click action.
  // Different manufacturers have different definitions.
  // @inject_tag: json:"action"
  int32 Action = 1;

  // Activity opens an in-app page (activity's intent action).
  // @inject_tag: json:"activity"
  string Activity = 2;

  // Url opens the URL of a webpage.
  // @inject_tag: json:"url"
  string Url = 3;

  // Parameters represent the parameters appended to the URL after the URL redirection.
  // @inject_tag: json:"parameters"
  google.protobuf.Struct Parameters = 4;
}

// MeizuPushNotification
// https://github.com/MEIZUPUSH/PushAPI/blob/master/README.md
message MeizuPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;

  // @inject_tag: json:"title"
  string Title = 2;

  // @inject_tag: json:"content"
  string Content = 3;

  // TTL The valid duration of the message, in seconds, and the duration of the push service cache message.
  // @inject_tag: json:"ttl"
  int64 TTL = 4;

  // NotifyType
  // DEFAULT_ALL = -1;
  // DEFAULT_SOUND = 0; 使用默认提示音提示
  // DEFAULT_VIBRATE = 1; 使用默认振动提示
  // DEFAULT_LIGHTS = 2; 使用默认呼吸灯提示。
  // @inject_tag: json:"notify_type"
  int32 NotifyType = 5;

  // Foreground Whether to display notification bar messages when the app is in the foreground
  // @inject_tag: json:"foreground"
  bool Foreground = 6;
//  bool IsScheduled = 7;
//  string ScheduledStartTime = 8;   // 定时展示开始时间(yyyy-MM-dd HH:mm:ss)
//  string ScheduledEndTime = 9;     // 定时展示结束时间(yyyy-MM-dd HH:mm:ss)

  // ClickAction 点击跳转类型
  // 0 打开应用
  // 1 打开应用内页（activity的action标签名）
  // 2 打开H5地址（应用本地的URI）
  // Activity 打开应用内页（activity 的 intent action）
  // @inject_tag: json:"click_action"
  ClickAction ClickAction = 10;

  // Data Additional Custom Parameters
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 11;
}

message HonorPushRequestData {
  // @inject_tag: json:"meta"
  Meta Meta = 1;

  // @inject_tag: json:"title"
  string Title = 2;

  // @inject_tag: json:"content"
  string Content = 3;

  // Icon Message icon, the icon to display on the notification bar
  // @inject_tag: json:"icon"
  string Icon = 4;

  // Tag Message identifier, used for message deduplication and overwriting.
  // @inject_tag: json:"tag"
  string Tag = 5;

  // Group 消息分组，例 如发送10条带有同样group字段的消息，手机上只会展示该组消息中最新的一条和当前该组接收到的消息总数目，不会展示10条消息。
  // @inject_tag: json:"group"
  string Group = 6;

  // NotifyId 消息通知ID，用于消息覆盖
  // @inject_tag: json:"notify_id"
  int32 NotifyId = 7;

  // TTL The valid duration of the message, in seconds, and the duration of the push service cache message.
  // @inject_tag: json:"ttl"
  int64 TTL = 8;

  // 测试模式推送消息
  // @inject_tag: json:"development"
  bool Development = 9;

  // Action 点击跳转类型
  // 1 打开应用内页（activity的action标签名）
  // 2 打开特定url
  // 3 打开应用
  // @inject_tag: json:"click_action"
  ClickAction ClickAction = 10;

  // 消息角标
  // @inject_tag: json:"badge"
  BadgeNotification Badge = 11;

  // 附加的自定义参数
  // @inject_tag: json:"data"
  google.protobuf.Struct Data = 12;
}

message BadgeNotification {
  // @inject_tag: json:"add_num"
  int32 AddNum = 1;
  // @inject_tag: json:"set_num"
  int32 SetNum = 2;
  // @inject_tag: json:"class"
  string Class = 3;
}

//message SendOptions {
//  // DryRun 只进行数据校验不实际推送，数据校验成功即为成功
//  bool DryRun = 1;
//  // Development 测试模式推送
//  bool Development= 2;
//  // Retry 重试次数
//  int32 Retry = 3;
//  // RetryInterval 重试间隔（以秒为单位）
//  int32 RetryInterval = 4;
//}

service PushService {
  rpc Push (PushRequest) returns (PushResponse) {}
}